// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicInstrumentsCrm.Domain;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MusicInstrumentsCrm.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FullAddress")
                        .HasColumnName("full_address")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnName("patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<string>("crm_user")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("crm_user");

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("text");

                    b.Property<string>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("text");

                    b.Property<int?>("mark_model")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("mark_model");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("address")
                        .HasColumnType("integer");

                    b.Property<int?>("car")
                        .HasColumnType("integer");

                    b.Property<int?>("courier")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("address");

                    b.HasIndex("car");

                    b.HasIndex("courier");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Factory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnName("foundation_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("address")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("address");

                    b.ToTable("Factory");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Good", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<int?>("factory")
                        .HasColumnType("integer");

                    b.Property<int?>("good_type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("factory");

                    b.HasIndex("good_type");

                    b.ToTable("Good");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.GoodInOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnName("count")
                        .HasColumnType("integer");

                    b.Property<int?>("good")
                        .HasColumnType("integer");

                    b.Property<int?>("offer")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("good");

                    b.HasIndex("offer");

                    b.ToTable("GoodInOffer");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.GoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TypeName")
                        .HasColumnName("type_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GoodType");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("country")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("country");

                    b.ToTable("Mark");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ModelName")
                        .HasColumnName("model_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Year")
                        .HasColumnName("year")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("mark")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("mark");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<decimal>("Summary")
                        .HasColumnName("sum")
                        .HasColumnType("numeric");

                    b.Property<int?>("buyer")
                        .HasColumnType("integer");

                    b.Property<int?>("delivery")
                        .HasColumnType("integer");

                    b.Property<int?>("seller")
                        .HasColumnType("integer");

                    b.Property<int?>("store")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("buyer");

                    b.HasIndex("delivery");

                    b.HasIndex("seller");

                    b.HasIndex("store");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<string>("Inn")
                        .HasColumnName("inn")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnName("passport_number")
                        .HasColumnType("text");

                    b.Property<string>("PassportSerial")
                        .HasColumnName("passport_serial")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnName("patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<string>("Snils")
                        .HasColumnName("snils")
                        .HasColumnType("text");

                    b.Property<string>("crm_user")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("crm_user");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnName("foundation_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("address")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("address");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.SupplyInStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("good")
                        .HasColumnType("integer");

                    b.Property<int?>("store")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("good");

                    b.HasIndex("store");

                    b.ToTable("SupplyInStore");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MyId")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicInstrumentsCrm.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Buyer", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("crm_user");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Car", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Model", "Model")
                        .WithMany()
                        .HasForeignKey("mark_model");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Delivery", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("address");

                    b.HasOne("MusicInstrumentsCrm.Domain.Car", "Car")
                        .WithMany()
                        .HasForeignKey("car");

                    b.HasOne("MusicInstrumentsCrm.Domain.Staff", "Courier")
                        .WithMany()
                        .HasForeignKey("courier");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Factory", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("address");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Good", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("factory");

                    b.HasOne("MusicInstrumentsCrm.Domain.GoodType", "GoodType")
                        .WithMany()
                        .HasForeignKey("good_type");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.GoodInOffer", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Good", "Good")
                        .WithMany()
                        .HasForeignKey("good");

                    b.HasOne("MusicInstrumentsCrm.Domain.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("offer");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Mark", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("country");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Model", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Mark", "Mark")
                        .WithMany()
                        .HasForeignKey("mark");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Offer", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("buyer");

                    b.HasOne("MusicInstrumentsCrm.Domain.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("delivery");

                    b.HasOne("MusicInstrumentsCrm.Domain.Staff", "Seller")
                        .WithMany()
                        .HasForeignKey("seller");

                    b.HasOne("MusicInstrumentsCrm.Domain.Store", "Store")
                        .WithMany()
                        .HasForeignKey("store");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Staff", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("crm_user");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.Store", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("address");
                });

            modelBuilder.Entity("MusicInstrumentsCrm.Domain.SupplyInStore", b =>
                {
                    b.HasOne("MusicInstrumentsCrm.Domain.Good", "Good")
                        .WithMany()
                        .HasForeignKey("good");

                    b.HasOne("MusicInstrumentsCrm.Domain.Store", "Store")
                        .WithMany()
                        .HasForeignKey("store");
                });
#pragma warning restore 612, 618
        }
    }
}
